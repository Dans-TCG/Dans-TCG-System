# Docs for the Azure Web Apps Deploy action: https://github.com/Azure/webapps-deploy
# More GitHub Actions for Azure: https://github.com/Azure/actions

name: deploy-appservice-backend

concurrency:
  group: backend-deploy-production
  cancel-in-progress: true

on:
  push:
    branches: [ main ]
    paths:
      - "backend/**"
      - ".github/workflows/main_danstcg-webapp.yml"
  workflow_dispatch:

env:
  APP_NAME: ${{ vars.BACKEND_APP_NAME }}
  RESOURCE_GROUP: ${{ vars.RESOURCE_GROUP }}

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read #This is required for actions/checkout

    steps:
      - uses: actions/checkout@v4

      - name: Set up .NET 8
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Cache NuGet
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Restore
        run: dotnet restore backend/DansTCG.API/DansTCG.API.csproj

      - name: Build
        run: dotnet build --no-restore --configuration Release backend/DansTCG.API/DansTCG.API.csproj

      - name: Publish API
        run: dotnet publish backend/DansTCG.API/DansTCG.API.csproj -c Release -o artifact

      - name: Upload artifact for deployment job
        uses: actions/upload-artifact@v4
        with:
          name: backend-app
          path: artifact

  deploy:
    runs-on: ubuntu-latest
    needs: build
    environment: production
    permissions:
      id-token: write #This is required for requesting the JWT
      contents: read #This is required for actions/checkout

    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v5
        with:
          name: backend-app
          path: ./published
      
      - name: Login to Azure
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Resolve production hostname
        id: resolve-host
        shell: bash
        run: |
          set -e
          HOST=$(az webapp show -g "$RESOURCE_GROUP" -n "$APP_NAME" --query defaultHostName -o tsv)
          if [ -z "$HOST" ]; then echo "::error::Could not resolve defaultHostName for $APP_NAME in $RESOURCE_GROUP"; exit 1; fi
          echo "host=$HOST" >> "$GITHUB_OUTPUT"

      - name: Deploy to Azure Web App
        id: deploy-to-webapp
        uses: azure/webapps-deploy@v3
        with:
          app-name: ${{ env.APP_NAME }}
          package: ./published

      - name: Verify production health
        shell: bash
        run: |
          set -e
          HOST="${{ steps.resolve-host.outputs.host }}"
          for i in {1..10}; do
            if curl -fsS "https://${HOST}/health/db" | grep -q '"db":"ok"'; then
              echo "Production health ok"; exit 0;
            fi
            echo "Prod health not ready yet, retry $i/10..."; sleep 5;
          done
          echo "::error::Production health check failed"; exit 1
      
      - name: Emit deployment telemetry (Application Insights) # optional
        env:
          AI_CONNECTION_STRING: ${{ secrets.APPLICATION_INSIGHTS_CONNECTION_STRING }}
          GITHUB_SHA: ${{ github.sha }}
          GITHUB_RUN_ID: ${{ github.run_id }}
          APP_NAME: ${{ env.APP_NAME }}
        shell: bash
        run: |
          set -euo pipefail
          if [ -z "${AI_CONNECTION_STRING}" ]; then
            echo "No AI connection string set; skipping telemetry."; exit 0;
          fi
          key=$(echo "$AI_CONNECTION_STRING" | sed -n 's/.*InstrumentationKey=\([^;]*\).*/\1/p')
          ingest=$(echo "$AI_CONNECTION_STRING" | sed -n 's/.*IngestionEndpoint=\([^;]*\).*/\1/p')
          if [ -z "$key" ] || [ -z "$ingest" ]; then
            echo "Could not parse Application Insights connection string; skipping telemetry."; exit 0;
          fi
          event_time=$(date -u +"%Y-%m-%dT%H:%M:%S.%3NZ")
          cat > telemetry.json <<EOF
          [{
            "name": "Microsoft.ApplicationInsights.Event",
            "time": "$event_time",
            "iKey": "$key",
            "tags": {"ai.cloud.role": "$APP_NAME", "ai.operation.id": "$GITHUB_RUN_ID"},
            "data": {"baseType": "EventData", "baseData": {"name": "deployment", "properties": {"commit": "$GITHUB_SHA", "runId": "$GITHUB_RUN_ID", "source": "github-actions", "workflow": "deploy-appservice-backend"}}}
          }]
          EOF
          curl -fsS -H "Content-Type: application/x-json-stream" -X POST "$ingest/v2/track" --data-binary @telemetry.json || echo "Telemetry post failed (non-blocking)."
          