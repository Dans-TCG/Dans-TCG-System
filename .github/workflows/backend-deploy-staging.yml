name: backend-deploy-staging

on:
  push:
    branches: [ main ]
    paths:
      - 'backend/**'
      - '.github/workflows/backend-deploy-staging.yml'
  workflow_dispatch:

env:
  APP_NAME: ${{ vars.BACKEND_APP_NAME || 'danstcg-webapp' }}
  RESOURCE_GROUP: ${{ vars.RESOURCE_GROUP || 'danstcg-rg' }}

permissions:
  contents: read
  id-token: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup .NET 8
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Restore
        run: dotnet restore backend/DansTCG.API/DansTCG.API.csproj

      - name: Build
        run: dotnet build --no-restore --configuration Release backend/DansTCG.API/DansTCG.API.csproj

      - name: Publish
        run: dotnet publish backend/DansTCG.API/DansTCG.API.csproj -c Release -o artifact

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: backend-app
          path: artifact

  deploy-staging:
    runs-on: ubuntu-latest
    needs: build
    environment: staging
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: backend-app
          path: ./published

      - name: Login to Azure
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Ensure staging slot exists
        shell: bash
        run: |
          set -e
          if ! az webapp deployment slot list -g "$RESOURCE_GROUP" -n "$APP_NAME" --query "[?name=='staging']" -o tsv | grep -q staging; then
            echo "Creating staging slot..."
            az webapp deployment slot create -g "$RESOURCE_GROUP" -n "$APP_NAME" --slot staging
          else
            echo "Staging slot already exists."
          fi

      - name: Deploy to staging slot
        uses: azure/webapps-deploy@v3
        with:
          app-name: ${{ env.APP_NAME }}
          slot-name: staging
          package: ./published

      - name: Warm up staging
        shell: bash
        run: |
          set -e
          echo "Warming up staging slot..."
          # Replace with your staging hostname if custom domain in use
          for i in {1..10}; do
            if curl -fsS "https://${APP_NAME}-staging.azurewebsites.net/health/db" | grep -q '"db":"ok"'; then
              echo "Staging health ok"; exit 0;
            fi
            echo "Health not ready yet, retry $i/10..."; sleep 5;
          done
          echo "::error::Staging health check failed"; exit 1

  swap-to-production:
    runs-on: ubuntu-latest
    needs: deploy-staging
    environment: production
    steps:
      - name: Login to Azure
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Swap staging -> production
        run: az webapp deployment slot swap -g "$RESOURCE_GROUP" -n "$APP_NAME" --slot staging --target-slot production

      - name: Verify production health
        shell: bash
        run: |
          set -e
          for i in {1..10}; do
            if curl -fsS "https://${APP_NAME}.azurewebsites.net/health/db" | grep -q '"db":"ok"'; then
              echo "Production health ok"; exit 0;
            fi
            echo "Prod health not ready yet, retry $i/10..."; sleep 5;
          done
          echo "::error::Production health check failed after swap"; exit 1

      - name: Verify custom domain health (if configured)
        shell: bash
        env:
          CUSTOM_API_BASE: ${{ vars.VITE_API_BASE }}
        run: |
          set -e
          if [ -z "${CUSTOM_API_BASE}" ]; then
            echo "No VITE_API_BASE repo var set; skipping custom domain health check."; exit 0;
          fi
          echo "Custom API base: ${CUSTOM_API_BASE}"
          for i in {1..10}; do
            if curl -fsS "${CUSTOM_API_BASE%/}/health/db" | grep -q '"db":"ok"'; then
              echo "Custom domain health ok"; exit 0;
            fi
            echo "Custom domain not ready yet, retry $i/10..."; sleep 5;
          done
          echo "::error::Custom domain health check failed after swap"; exit 1
